{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.cae48ebd3231c0d4dd7d.hot-update.js","sources":["webpack:///./services/CanvasService.ts"],"sourcesContent":["import * as constants from '../contsants';\r\nimport { Square } from '../maths/Square';\r\nimport { Vec3 } from '../maths/Vec3';\r\nimport { Hexagon } from '../maths/Hexagon';\r\n\r\nconst SHAPE_COLOR = constants.colors.theme.pinkSand;\r\n\r\nexport class CanvasService {\r\n  private static instance: CanvasService;\r\n  private canvas: HTMLCanvasElement;\r\n  private context: CanvasRenderingContext2D;\r\n  private square: Square;\r\n  private hexagon: Hexagon;\r\n\r\n  private constructor() {\r\n    window.addEventListener('resize', () => this.sizeCanvas());\r\n  }\r\n\r\n  public static getInstance(): CanvasService {\r\n    if (!this.instance) {\r\n      this.instance = new CanvasService();\r\n    }\r\n\r\n    return this.instance;\r\n  }\r\n\r\n  public init(): void {\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n\r\n    if (!canvas) {\r\n      throw new Error('No canvas rendered.');\r\n    }\r\n\r\n    const { clientWidth: width, clientHeight: height } = canvas;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    this.canvas = canvas;\r\n    this.context = canvas.getContext('2d');\r\n    const center = this.getCanvasCenter(canvas);\r\n    const hexCenter = center.clone().translate(-width / 3.75, -height / 2.5, 0);\r\n    this.hexagon = new Hexagon(\r\n      this.getHexWidth(canvas),\r\n      hexCenter,\r\n      SHAPE_COLOR\r\n    );\r\n    const sqCenter = center.translate(width / 5, height / 3, 0);\r\n    this.square = new Square(this.getSqWidth(canvas), sqCenter, SHAPE_COLOR);\r\n  }\r\n\r\n  private sizeCanvas(): void {\r\n    const { canvas } = this;\r\n    const { clientWidth: width, clientHeight: height } = this.canvas;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const center = this.getCanvasCenter(canvas);\r\n    const hexCenter = center.clone().translate(-width / 3.75, -height / 2.5, 0);\r\n    this.hexagon.assignProperties(\r\n      this.getHexWidth(canvas),\r\n      hexCenter,\r\n      SHAPE_COLOR\r\n    );\r\n    const sqCenter = center.translate(width / 5, height / 3, 0);\r\n    this.square.assignProperties(this.getSqWidth(canvas), sqCenter, SHAPE_COLOR);\r\n  }\r\n\r\n  public startDrawing(): void {\r\n    const loop = () => {\r\n      this.context.clearRect(\r\n        0,\r\n        0,\r\n        this.context.canvas.width,\r\n        this.context.canvas.height\r\n      );\r\n      this.hexagon.draw(this.context);\r\n      this.hexagon.rotate(0.5);\r\n\r\n      this.square.draw(this.context);\r\n      this.square.rotate(0.75);\r\n\r\n      window.requestAnimationFrame(loop);\r\n    };\r\n\r\n    loop();\r\n  }\r\n\r\n  private getCanvasCenter(canvas: HTMLCanvasElement): Vec3 {\r\n    const { width, height } = canvas;\r\n    return new Vec3(width / 2, height / 2, 0);\r\n  }\r\n\r\n  private getHexWidth(canvas: HTMLCanvasElement): number {\r\n    return canvas.width * canvas.height * 1e-4;\r\n  }\r\n\r\n  private getSqWidth(canvas: HTMLCanvasElement): number {\r\n    return canvas.width * canvas.height * 1e-4;\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAOA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAVA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAxCA;AAAA;AAAA;AA0CA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAxDA;AAAA;AAAA;AA0DA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;AAAA;AA8EA;AAAA;AAEA;AACA;AAjFA;AAAA;AAAA;AAoFA;AACA;AArFA;AAAA;AAAA;AAwFA;AACA;AAzFA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AADA;AAAA;AACA;AADA;;;;A","sourceRoot":""}